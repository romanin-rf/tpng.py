from PIL import Image
from _typeshed import SupportsRead
from pathlib import Path
from .Types import ImageInfo as ImageInfo
from typing import Union, Tuple, Iterable, List
from typing_extensions import Literal, TypeAlias

_Mode: TypeAlias = str
_Color: TypeAlias = Union[int, Tuple[int], Tuple[int, int, int], Tuple[int, int, int, int], str, float, Tuple[float]]

class TPNG(Image.Image):
    def get_info(cls) -> ImageInfo: ...
    @staticmethod
    def _tohex(pixel: Iterable[int]) -> str: ...
    def get_rich_string(self, pixel: str="â–ˆ") -> str: ...

def open(
    fp: Union[str, bytes, Path, SupportsRead[bytes]], mode: Literal["r"] = ..., formats: List[str] | Tuple[str, ...] | None = ...
) -> TPNG: ...
def new(mode: _Mode, size: Tuple[int, int], color: _Color = ...) -> TPNG: ...
def frombytes(mode: _Mode, size: Tuple[int, int], data, decoder_name: str = ..., *args) -> TPNG: ...
def frombuffer(mode: _Mode, size: Tuple[int, int], data, decoder_name: str = ..., *args) -> TPNG: ...
def fromarray(obj, mode: _Mode | None = ...) -> TPNG: ...
def fromqimage(im) -> TPNG: ...
def fromqpixmap(im) -> TPNG: ...