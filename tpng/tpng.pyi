from io import BufferedReader, BytesIO
from PIL import Image
from .Types import ImageInfo as ImageInfo
from typing import Tuple, overload, Iterable, Optional

class TPNG:
    @overload
    def __init__(self, fp: str, *args, **kwargs) -> None: ...
    @overload
    def __init__(self, fp: Image.Image, *args, **kwargs) -> None: ...
    @overload
    def __init__(self, fp: bytes, mode: str, size: Tuple[int, int], *args, **kwargs) -> None: ...
    @overload
    def __init__(self, fp: BufferedReader, mode: str, size: Tuple[int, int], *args, **kwargs) -> None: ...
    @overload
    def __init__(self, fp: BytesIO, mode: str, size: Tuple[int, int], *args, **kwargs) -> None: ...
    def resize(self, new_size: Tuple[int, int]) -> None: ...
    def get_info(self) -> ImageInfo: ...
    @staticmethod
    def to_hex(pixel: Iterable[int]) -> str: ...
    def get_rich_string(
        self,
        pixel: str="â–ˆ",
        error_pixel="?",
        alpha_pixel=" ",
        alpha_colours: Optional[Iterable[Iterable[int]]]=None
    ) -> str: ...